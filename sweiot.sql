-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.batch
(
    id integer NOT NULL DEFAULT 'nextval('batch_id_seq'::regclass)',
    producer_id integer NOT NULL DEFAULT 'nextval('batch_producer_id_seq'::regclass)',
    production_comments character varying COLLATE pg_catalog."default",
    order_id integer NOT NULL DEFAULT 'nextval('batch_order_id_seq'::regclass)',
    CONSTRAINT batch_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.config
(
    key character varying COLLATE pg_catalog."default" NOT NULL,
    system_settings json NOT NULL,
    application_settings json NOT NULL,
    CONSTRAINT config_pkey PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public.customers
(
    id integer NOT NULL DEFAULT 'nextval('customers_id_seq'::regclass)',
    name character varying COLLATE pg_catalog."default" NOT NULL,
    adress character varying COLLATE pg_catalog."default" NOT NULL,
    warranty_time time without time zone,
    purchase_data character varying COLLATE pg_catalog."default",
    CONSTRAINT customers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.devices
(
    id integer NOT NULL DEFAULT 'nextval('devices_id_seq'::regclass)',
    adress character varying COLLATE pg_catalog."default" NOT NULL,
    fw_version integer[] NOT NULL,
    config_key character varying COLLATE pg_catalog."default" NOT NULL,
    customer_id integer NOT NULL DEFAULT 'nextval('devices_customer_id_seq'::regclass)',
    batch_id integer NOT NULL DEFAULT 'nextval('devices_batch_id_seq'::regclass)',
    mac_adress character varying COLLATE pg_catalog."default",
    serial_number character varying COLLATE pg_catalog."default",
    hw_version integer[],
    CONSTRAINT devices_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.firmwares
(
    version integer[] NOT NULL,
    firmware json NOT NULL,
    CONSTRAINT firmwares_pkey PRIMARY KEY (version)
);

CREATE TABLE IF NOT EXISTS public.keys
(
    id integer NOT NULL DEFAULT 'nextval('keys_id_seq'::regclass)',
    privatekey bytea NOT NULL,
    publickey bytea NOT NULL,
    device_id integer,
    customer_id integer,
    CONSTRAINT keys_pkey PRIMARY KEY (id),
    CONSTRAINT keys_privatekey_key UNIQUE (privatekey),
    CONSTRAINT keys_publickey_key UNIQUE (publickey)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id integer NOT NULL DEFAULT 'nextval('orders_id_seq'::regclass)',
    order_date date NOT NULL,
    order_quantity integer NOT NULL,
    order_information character varying COLLATE pg_catalog."default",
    delivered_date date,
    delivered_quantity integer,
    CONSTRAINT orders_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.producers
(
    id integer NOT NULL DEFAULT 'nextval('producers_id_seq'::regclass)',
    name character varying COLLATE pg_catalog."default" NOT NULL,
    adress character varying COLLATE pg_catalog."default",
    CONSTRAINT producers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.role
(
    id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    read boolean NOT NULL,
    write boolean NOT NULL,
    scope integer NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id),
    CONSTRAINT role_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT 'nextval('users_id_seq'::regclass)',
    name character varying COLLATE pg_catalog."default" NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    role_id integer NOT NULL DEFAULT 'nextval('users_role_id_seq'::regclass)',
    customer_id integer NOT NULL DEFAULT 'nextval('users_customer_id_seq'::regclass)',
    password character varying COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_name_key UNIQUE (name)
);

ALTER TABLE IF EXISTS public.batch
    ADD CONSTRAINT fk_order FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.batch
    ADD CONSTRAINT fk_producer FOREIGN KEY (producer_id)
    REFERENCES public.producers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.devices
    ADD CONSTRAINT fk_batch FOREIGN KEY (batch_id)
    REFERENCES public.batch (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.devices
    ADD CONSTRAINT fk_config_key FOREIGN KEY (config_key)
    REFERENCES public.config (key) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.devices
    ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.devices
    ADD CONSTRAINT fk_fw FOREIGN KEY (fw_version)
    REFERENCES public.firmwares (version) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.keys
    ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.keys
    ADD CONSTRAINT fk_device FOREIGN KEY (device_id)
    REFERENCES public.devices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id)
    REFERENCES public.customers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_role FOREIGN KEY (role_id)
    REFERENCES public.role (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;